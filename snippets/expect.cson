'.source.js':
# Methods with Shorthands/Templates

#Require and Imports
  'const expect = require(\'expect\');':
    'prefix':'requireExpect'
    'body':'''
      const expect = require(\'expect\');
    '''
    'description':'Require expect package in file. (ES5)'

  'import expect from \'expect\';':
    'prefix':'importExpect'
    'body':'''
      import expect from \'expect\';
    '''
    'description':'Import expect package in file. (ES6)'

#General Expect Statement Alone
  'expect()':
    'prefix':'expect'
    'body':'''
      expect($1)$2
    '''
    'description':'General expect() statement'

#Assertions
# toExist
  'expect().toExist();':
    'prefix':'expectToExist'
    'body':'''
      expect($1).toExist();$2
    '''
    'description':'Asserts the given object is truthy.'

  'toExist();':
    'prefix':'toExist'
    'body':'''
      toExist();
    '''
    'description':'Asserts the given object is truthy.'

# toNotExist
  'expect().toNotExist();':
    'prefix':'expectToNotExist'
    'body':'''
      expect($1).toNotExist();$2
    '''
    'description':'Asserts the given object is falsy.'

  'toNotExist();':
    'prefix':'toNotExist'
    'body':'''
      toNotExist();
    '''
    'description':'Asserts the given object is falsy.'

# toBe
  'expect().toBe();':
    'prefix':'expectToBe'
    'body':'''
      expect($1).toBe($2);$3
    '''
    'description':'Asserts that object is strictly equal to value using ==='

  'toBe();':
    'prefix':'toBe'
    'body':'''
      toBe($1);$2
    '''
    'description':'Asserts that object is strictly equal to value using ==='

# toNotBe
  'expect().toNotBe();':
    'prefix':'expectToNotBe'
    'body':'''
      expect($1).toNotBe($2);$3
    '''
    'description':'Asserts that object is strictly NOT equal to value using ==='

  'toNotBe();':
    'prefix':'toNotBe'
    'body':'''
      toNotBe($1);$2
    '''
    'description':'Asserts that object is strictly NOT equal to value using ==='

# toEqual
  'expect().toEqual();':
    'prefix':'expectToNotBe'
    'body':'''
      expect($1).toEqual($2);$3
    '''
    'description':'Asserts that the given object equals value using npm module is-equal.'

  'toEqual();':
    'prefix':'toEqual'
    'body':'''
      toEqual($1);$2
    '''
    'description':'Asserts that the given object equals value using npm module is-equal.'

# toNotEqual
  'expect().toNotEqual();':
    'prefix':'expectToNotEqual'
    'body':'''
      expect($1).toNotEqual($2);$3
    '''
    'description':'Asserts that the given object is not equal to value using npm module is-equal.'

  'toNotEqual();':
    'prefix':'toNotEqual'
    'body':'''
      toNotEqual($1);$2
    '''
    'description':'Asserts that the given object is not equal to value using npm module is-equal.'

# toThrow
  'expect().toThrow();':
    'prefix':'expectToThrow'
    'body':'''
      expect($1).toThrow($2);$3
    '''
    'description':'Asserts that the given block throws an error.
    The error argument may be a constructor (to test using instanceof), or a string/RegExp to test against error.message.'

  'toThrow();':
    'prefix':'toThrow'
    'body':'''
      toThrow($1);$2
    '''
    'description':'Asserts that the given block throws an error.
    The error argument may be a constructor (to test using instanceof), or a string/RegExp to test against error.message.'

# toNotThrow
  'expect().toNotThrow();':
    'prefix':'expectToNotThrow'
    'body':'''
      expect($1).toNotThrow($2);$3
    '''
    'description':'Asserts that the given block does not throw.'

  'toNotThrow();':
    'prefix':'toNotThrow'
    'body':'''
      toNotThrow($1);$2
    '''
    'description':'Asserts that the given block does not throw.'

# toBeA
  'expect().toBeA();':
    'prefix':'expectToBeA'
    'body':'''
      expect($1).expectToBeA($2);$3
    '''
    'description':'Asserts the typeof the given object is string OR is an instanceof constructor.'

  'toBeA();':
    'prefix':'toBeA'
    'body':'''
      toBeA($1);$2
    '''
    'description':'Asserts the typeof the given object is string OR is an instanceof constructor.'

# toNotBeA
  'expect().toNotBeA();':
    'prefix':'expectToNotBeA'
    'body':'''
      expect($1).toNotBeA($2);$3
    '''
    'description':'Asserts the typeof the given object is NOT string OR is NOT an instanceof constructor.'

  'toNotBeA();':
    'prefix':'toNotBeA'
    'body':'''
      toNotBeA($1);$2
    '''
    'description':'Asserts the typeof the given object is string OR is NOT an instanceof constructor.'

# toMatch
  'expect().toMatch();':
    'prefix':'expectToMatch'
    'body':'''
      expect($1).toMatch($2);$3
    '''
    'description':'Asserts the given string or object matches a pattern.
    When using a string, pattern must be a RegExp. When using an object, pattern may be anything acceptable to tmatch.'

  'toMatch();':
    'prefix':'toMatch'
    'body':'''
      toMatch($1);$2
    '''
    'description':'Asserts the given string or object matches a pattern.
    When using a string, pattern must be a RegExp. When using an object, pattern may be anything acceptable to tmatch.'

# toNotMatch
  'expect().toNotMatch();':
    'prefix':'expectToNotMatch'
    'body':'''
      expect($1).toNotMatch($2);$3
    '''
    'description':'Asserts the given string or object does not match a pattern.
    When using a string, pattern must be a RegExp. When using an object, pattern may be anything acceptable to tmatch.'

  'toNotMatch();':
    'prefix':'toNotMatch'
    'body':'''
      toNotMatch($1);$2
    '''
    'description':'Asserts the given string or object does not match a pattern.
    When using a string, pattern must be a RegExp. When using an object, pattern may be anything acceptable to tmatch.'

# toBeLessThan
  'expect().toBeLessThan();':
    'prefix':'expectToBeLessThan'
    'body':'''
      expect($1).toBeLessThan($2);$3
    '''
    'description':'Asserts the given number is less than value.'

  'toBeLessThan();':
    'prefix':'toBeLessThan'
    'body':'''
      toBeLessThan($1);$2
    '''
    'description':'Asserts the given number is less than value.'

# toBeLessThanOrEqualTo
  'expect().toBeLessThanOrEqualTo();':
    'prefix':'expectToBeLessThanOrEqualTo'
    'body':'''
      expect($1).toBeLessThanOrEqualTo($2);$3
    '''
    'description':'Asserts the given number is less than or equal to value.'

  'toBeLessThanOrEqualTo();':
    'prefix':'toBeLessThanOrEqualTo'
    'body':'''
      toBeLessThanOrEqualTo($1);$2
    '''
    'description':'Asserts the given number is less than or equal to value.'

# toBeGreaterThan
  'expect().toBeGreaterThan();':
    'prefix':'toBeGreaterThan'
    'body':'''
      expect($1).toBeGreaterThan($2);$3
    '''
    'description':'Asserts the given number is greater than value.'

  'toBeGreaterThan();':
    'prefix':'toBeGreaterThan'
    'body':'''
      toBeGreaterThan($1);$2
    '''
    'description':'Asserts the given number is greater than value.'

# toBeGreaterThanOrEqualTo
  'expect().toBeGreaterThanOrEqualTo();':
    'prefix':'expectToBeGreaterThanOrEqualTo'
    'body':'''
      expect($1).toBeGreaterThanOrEqualTo($2);$3
    '''
    'description':'Asserts the given number is greater than or equal to value.'

  'toBeGreaterThanOrEqualTo();':
    'prefix':'toBeGreaterThanOrEqualTo'
    'body':'''
      toBeGreaterThanOrEqualTo($1);$2
    '''
    'description':'Asserts the given number is greater than or equal to value.'

# toInclude
  'expect().toInclude();':
    'prefix':'expectToInclude'
    'body':'''
      expect($1).toInclude($2);$3
    '''
    'description':'Asserts that a given value is included (or "contained") within another.
    The actual value may be an array, object, or a string.
    The comparator function, if given, should compare two objects and return false if they are not equal. The default is to use isEqual.'

  'toInclude();':
    'prefix':'toInclude'
    'body':'''
      toInclude($1);$2
    '''
    'description':'Asserts that a given value is included (or "contained") within another.
    The actual value may be an array, object, or a string.
    The comparator function, if given, should compare two objects and return false if they are not equal. The default is to use isEqual.'

# toExclude
  'expect().toExclude();':
    'prefix':'expectToExclude'
    'body':'''
      expect($1).toExclude($2);$3
    '''
    'description':'Asserts that a given value is not included (or "contained") within another.
    The actual value may be an array, object, or a string.
    The comparator function, if given, should compare two objects and return false if they are not equal. The default is to use isEqual.'

  'toExclude();':
    'prefix':'toExclude'
    'body':'''
      toExclude($1);$2
    '''
    'description':'Asserts that a given value is not included (or "contained") within another.
    The actual value may be an array, object, or a string.
    The comparator function, if given, should compare two objects and return false if they are not equal. The default is to use isEqual.'

# toIncludeKey
  'expect().toIncludeKey();':
    'prefix':'expectToIncludeKey'
    'body':'''
      expect($1).toIncludeKey($2);$3
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) contains all of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

  'toIncludeKey();':
    'prefix':'toIncludeKey'
    'body':'''
      toIncludeKey($1);$2
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) contains all of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

# toIncludeKeys
  'expect().toIncludeKeys();':
    'prefix':'expectToIncludeKeys'
    'body':'''
      expect($1).toIncludeKeys($2);$3
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) contains all of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

  'toIncludeKeys();':
    'prefix':'toIncludeKeys'
    'body':'''
      toIncludeKeys($1);$2
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) contains all of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

# toExcludeKey
  'expect().toExcludeKey();':
    'prefix':'expectToExcludeKey'
    'body':'''
      expect($1).toExcludeKey($2);$3
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) does not contain any of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

  'toExcludeKey();':
    'prefix':'toExcludeKey'
    'body':'''
      toExcludeKey($1);$2
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) does not contain any of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

# toExcludeKeys
  'expect().toExcludeKeys();':
    'prefix':'expectToExcludeKeys'
    'body':'''
      expect($1).toExcludeKeys($2);$3
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) does not contain any of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

  'toExcludeKeys();':
    'prefix':'toExcludeKeys'
    'body':'''
      toExcludeKeys($1);$2
    '''
    'description':'Asserts that the given object (may be an array, or a function, or anything with keys) does not contain any of the provided keys.
    The optional parameter comparator is a function which if given an object and a string key, it should return a boolean detailing whether or not the key exists in the object.
    By default, a shallow check with Object.prototype.hasOwnProperty is performed.'

# toHaveBeenCalled
  'expect(spy).toHaveBeenCalled();':
    'prefix':'expectToHaveBeenCalled'
    'body':'''
      expect($1).toHaveBeenCalled();$2
    '''
    'description':'Asserts the given spy function has been called at least once.'

  'toHaveBeenCalled();':
    'prefix':'toHaveBeenCalled'
    'body':'''
      toHaveBeenCalled();
    '''
    'description':'Asserts the given spy function has been called at least once.'

# toHaveBeenNotCalled
  'expect(spy).toHaveBeenNotCalled();':
    'prefix':'expectToHaveNotBeenCalled'
    'body':'''
      expect($1).toHaveBeenNotCalled();$2
    '''
    'description':'Asserts the given spy function has not been called.'

  'toHaveBeenNotCalled();':
    'prefix':'toHaveBeenNotCalled'
    'body':'''
      toHaveBeenNotCalled();
    '''
    'description':'Asserts the given spy function has not been called.'

# toHaveBeenCalledWith
  'expect(spy).toHaveBeenCalledWith();':
    'prefix':'expectToHaveBeenCalledWith'
    'body':'''
      expect($1).toHaveBeenCalledWith($2);$3
    '''
    'description':'Asserts the given spy function has been called with the expected arguments.'

  'toHaveBeenCalledWith();':
    'prefix':'toHaveBeenCalledWith'
    'body':'''
      toHaveBeenCalledWith($1);$2
    '''
    'description':'Asserts the given spy function has been called with the expected arguments.'
